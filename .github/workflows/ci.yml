name: Cross-Platform Build

on:
  push:
    branches: [main]
  pull_request:
    # ranches: [main] # run this on all pr's

jobs:
  build-cross-platform:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # , windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix (Linux and macOS)
        if: runner.os != 'Windows'
        uses: cachix/install-nix-action@v22
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes


      # Install dependencies for Windows
      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        run: |
          # Install Chocolatey (if not present)
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install -y cmake

      # Other OS-specific dependency steps remain the same

      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build Lifelog Server
        run: cargo build --release
        continue-on-error: true

      # - name: Run Rust application
      #   run: |
      #     cargo run --release --bin lifelog-logger
      #     cargo run --release --bin lifelog-server
      #   continue-on-error: true

      # - name: Run Rust tests
      #   run: cargo test --release --verbose
      #   continue-on-error: true

      - name: Build the server with nix build (Linux and macOS)
        if: runner.os != 'Windows'
        run: nix build .#lifelog-server

      - name: Build the logger with nix build (Linux and macOS)
        if: runner.os != 'Windows'
        run: nix build .#lifelog-logger
