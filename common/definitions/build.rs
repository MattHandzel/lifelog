use std::{env, fs, path::Path};

// This build script looks at all of the data modalities that are define!
fn main() {
    // Re-run script if data-modalities directory changes
    //println!("cargo:rerun-if-changed=../../data-modalities");

    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("data_modalities.rs");

    // Get all modality directories
    let modalities = fs::read_dir("../../data-modalities")
        .unwrap()
        .filter_map(|e| e.ok())
        .filter(|e| e.file_type().map(|t| t.is_dir()).unwrap_or(false))
        .map(|e| e.file_name().into_string().unwrap());

    // Generate enum variants
    let variants: Vec<String> = modalities
        .map(|name| {
            // Convert kebab-case to PascalCase
            name.split('-')
                .map(|word| {
                    let mut chars = word.chars();
                    match chars.next() {
                        None => String::new(),
                        Some(c) => c.to_uppercase().chain(chars).collect(),
                    }
                })
                .collect()
        })
        .collect();

    // Generate Rust code
    let code = format!(
        r#"// Auto-generated by build.rs
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Deserialize, Serialize)]
pub enum DataModality {{
    {}
}}
"#,
        variants.join(",\n    ")
    );

    fs::write(dest_path, code).unwrap();
}
